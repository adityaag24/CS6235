//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SymbolTableBuilder<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   ClassHierarchyGraph<String> classHierarchyGraph = new ClassHierarchyGraph<String>();
   Map<String,SymbolTable> symbolTable = new HashMap<String,SymbolTable>();
   SymbolTable root;
   int noRefs;
   public SymbolTable getRoot(){
      return root;
   }
   public int getRefs(){
      return noRefs;
   }
   public ClassHierarchyGraph<String> getCHG(){
      return classHierarchyGraph;
   }
   public Map<String,SymbolTable> getSymbolTable(){
      return symbolTable;
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( QStatement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      SymbolTable sTable = new SymbolTable(n.f1.f0);
      String name1 = "main";
      String type1 = "method";
      String className1 = n.f1.f0.toString();
      NodeToken token1 = null;
      Object returnValue1 = null;
      classHierarchyGraph.addClass(n.f1.f0.toString());
      FunctionTable fTable = new FunctionTable(name1,type1,className1,token1,returnValue1);
      ArrayList<String> args = new ArrayList<String>();
      SymbolTableEntry param1 = new SymbolTableEntry(n.f11.f0,"String",n.f1.f0.toString(),args,false,"formalParam");  
      fTable.addArguement(param1);
      for ( Enumeration<Node> e = n.f14.elements(); e.hasMoreElements(); ) {
         VarDeclaration nextNode = (VarDeclaration)e.nextElement();
         NodeToken token = nextNode.f1.f0;
         String type = nextNode.f0.f0.choice.getClass().getSimpleName();
         String className;
         Object value;
         if(type.equals("ArrayType")){
            className = "IntegerArray";
            value = new ArrayList<Integer>();
         }else if(type.equals("BooleanType")){
            className = "Boolean";
            value = new Boolean(false);
         }else if(type.equals("IntegerType")){
            className = "Integer";
            value = new Integer(0);
         }else{
            Identifier idt = (Identifier)nextNode.f0.f0.choice;
            className = idt.f0.toString();
            value = null;
         }
         SymbolTableEntry entry = new SymbolTableEntry(token,type,className,value,false,"localVar");
         fTable.addLocalVar(entry);
      }
      NodeListOptional qStatements = n.f15;
      if(qStatements.present())
         fTable.setQStatements(qStatements);
      sTable.addFunctionTable(fTable);
      symbolTable.put(sTable.getKey(),sTable);
      root = sTable;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   SymbolTableEntry getEntry(FunctionTable fTable,SymbolTable sTable,String identifierKey){
      SymbolTableEntry entry;
      if(fTable.getLocalVars().containsKey(identifierKey)){
         entry = fTable.getLocalVars().get(identifierKey);
      }else if(fTable.getArguements().containsKey(identifierKey)){
         entry  = fTable.getArguements().get(identifierKey);
      }else{
         entry = sTable.getClassMembers().get(identifierKey);
      }
      return entry;
   }

   SymbolTableEntry processFormalParameter(FormalParameter fParam,MethodDeclaration method){
      NodeToken token = fParam.f1.f0;
      String type = fParam.f0.f0.choice.getClass().getSimpleName();
      String className;
      Object value;
      if(type.equals("ArrayType")){
         className = "IntegerArray";
         value = new ArrayList<Integer>();
      }else if(type.equals("BooleanType")){
         className = "Boolean";
         value = new Boolean(false);
      }else if(type.equals("IntegerType")){
         className = "Integer";
         value = new Integer(0);
      }else{
         Identifier idt = (Identifier)fParam.f0.f0.choice;
         className = idt.f0.toString();
         value = null;
      }
      SymbolTableEntry entry = new SymbolTableEntry(token,type,className,value,false,"formalParam");
      return entry;
   }

   ArrayList<SymbolTableEntry> processParameters(NodeOptional params,MethodDeclaration method){
      ArrayList<SymbolTableEntry> listParams = new ArrayList<SymbolTableEntry>();
      FormalParameterList formalParamList = (FormalParameterList)params.node;
      SymbolTableEntry entry = processFormalParameter(formalParamList.f0,method);
      NodeListOptional otherParams = (NodeListOptional)formalParamList.f1;
      listParams.add(entry);
      for ( Enumeration<Node> e = otherParams.elements(); e.hasMoreElements(); ) {
         FormalParameterRest fParamRest= (FormalParameterRest)e.nextElement();
         FormalParameter fParam = (FormalParameter)fParamRest.f1;
         SymbolTableEntry entry1 = processFormalParameter(fParam,method);
         listParams.add(entry1);
      }
      return listParams;
   }

  ArrayList<SymbolTableEntry> processLocalVars(NodeListOptional lVars,MethodDeclaration method){
      ArrayList<SymbolTableEntry> localVars = new ArrayList<SymbolTableEntry>();
      for ( Enumeration<Node> e = lVars.elements(); e.hasMoreElements(); ) {
         VarDeclaration nextNode = (VarDeclaration)e.nextElement();
         NodeToken token = nextNode.f1.f0;
         String type = nextNode.f0.f0.choice.getClass().getSimpleName();
         String className;
         Object value;
         if(type.equals("ArrayType")){
            className = "IntegerArray";
            value = new ArrayList<Integer>();
         }else if(type.equals("BooleanType")){
            className = "Boolean";
            value = new Boolean(false);
         }else if(type.equals("IntegerType")){
            className = "Integer";
            value = new Integer(0);
         }else{
            Identifier idt = (Identifier)nextNode.f0.f0.choice;
            className = idt.f0.toString();
            value = null;
         }
         SymbolTableEntry entry = new SymbolTableEntry(token,type,className,value,false,"localVar");
         localVars.add(entry);
      }
      return localVars;
   }

   SymbolTable makeSymbolTable(NodeToken cls, NodeListOptional classMembers, NodeListOptional functions){
      SymbolTable sTable = new SymbolTable(cls);
      if(classMembers.present()){
         for ( Enumeration<Node> e = classMembers.elements(); e.hasMoreElements(); ) {
            VarDeclaration nextNode = (VarDeclaration)e.nextElement();
            NodeToken token = nextNode.f1.f0;
            String type = nextNode.f0.f0.choice.getClass().getSimpleName();
            String className;
            Object value;
            if(type.equals("ArrayType")){
               className = "IntegerArray";
               value = new ArrayList<Integer>();
            }else if(type.equals("BooleanType")){
               className = "Boolean";
               value = new Boolean(false);
            }else if(type.equals("IntegerType")){
               className = "Integer";
               value = new Integer(0);
            }else{
               Identifier idt = (Identifier)nextNode.f0.f0.choice;
               className = idt.f0.toString();
               value = null;
            }
            SymbolTableEntry entry = new SymbolTableEntry(token,type,className,value,false,"classMember");
            sTable.addClassMember(entry);
         }
      }
      if(functions.present()){
         for (Enumeration<Node> e =  functions.elements();e.hasMoreElements();){
            MethodDeclaration nextNode = (MethodDeclaration)e.nextElement();
            String name = nextNode.f2.f0.toString();
            String type = nextNode.f1.f0.choice.getClass().getSimpleName();;
            String className;
            if(type.equals("ArrayType")){
               className = "IntegerArray";
            }else if(type.equals("BooleanType")){
               className = "Boolean";
            }else if(type.equals("IntegerType")){
               className = "Integer";
            }else{
               Identifier idt = (Identifier)nextNode.f1.f0.choice;
               className = idt.f0.toString();
            }
            NodeToken token = nextNode.f2.f0;
            Object returnValue;
            if(type.equals("BooleanType")){
               returnValue = new Boolean(false);
            }else if(type.equals("IntegerType")){
               returnValue = new Integer(0);
            }else if(type.equals("ArrayType")){
               returnValue = new ArrayList<Integer>();
            }else{
               Identifier idt = (Identifier)nextNode.f1.f0.choice;
               className = idt.f0.toString();
               returnValue = null;
            }
            FunctionTable fTable = new FunctionTable(name,type,className,token,returnValue);
            if(nextNode.f4.node!=null){
               ArrayList<SymbolTableEntry> parameters = processParameters(nextNode.f4,nextNode);
               for(SymbolTableEntry entry:parameters){
                  fTable.addArguement(entry);
               }
            }
            NodeListOptional varDeclarations = nextNode.f7;
            if(varDeclarations!=null){
               ArrayList<SymbolTableEntry> localVars = processLocalVars(nextNode.f7,nextNode);
               for(SymbolTableEntry entry:localVars){
                  fTable.addLocalVar(entry);
               }
            }
            NodeListOptional qStatements = nextNode.f8;
            if(qStatements.present())
               fTable.setQStatements(qStatements);
            sTable.addFunctionTable(fTable);
         }
      }
      return sTable;
   }
   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      classHierarchyGraph.addClass(n.f1.f0.toString());
      SymbolTable sTable = makeSymbolTable(n.f1.f0,n.f3,n.f4);
      symbolTable.put(sTable.getKey(),sTable);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      classHierarchyGraph.addEdge(n.f3.f0.toString(),n.f1.f0.toString());
      SymbolTable sTable = makeSymbolTable(n.f1.f0,n.f5,n.f6);
      symbolTable.put(sTable.getKey(),sTable);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( QStatement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( Query() )*
    * f1 -> Statement()
    */
   public R visit(QStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Identifier()
    * f2 -> "alias?"
    * f3 -> Identifier()
    * f4 -> <SCOMMENT2>
    */
   public R visit(Query n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( QStatement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      noRefs++;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
